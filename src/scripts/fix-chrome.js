// Script to auto-fix Chrome installation issues on Render
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üöÄ Chrome Auto-Fix Script');

// Check if running on Render
const isRender = process.env.RENDER === 'true' || 
                 process.env.IS_RENDER === 'true' || 
                 process.env.RENDER_EXTERNAL_URL || 
                 process.env.RENDER_SERVICE_ID;

if (!isRender) {
  console.log('Not running on Render.com, skipping special setup.');
  process.exit(0);
}

console.log('‚úì Detected Render.com environment');

// Check for placeholder path (just log, don't modify env)
if (process.env.PUPPETEER_EXECUTABLE_PATH === '/the/path/from/logs') {
  console.log('‚ö†Ô∏è Warning: PUPPETEER_EXECUTABLE_PATH is set to the placeholder value from documentation.');
  console.log('This will be ignored and automatic discovery will be used instead.');
}

// Read cache path from environment (don't set it)
const renderCachePath = process.env.PUPPETEER_CACHE_DIR || '/opt/render/.cache/puppeteer';
console.log(`Using Puppeteer cache path: ${renderCachePath}`);

// Ensure the Puppeteer cache directory exists with proper permissions
console.log(`Creating/checking cache directory: ${renderCachePath}`);
try {
  // Create directory with all parent directories if needed
  execSync(`mkdir -p ${renderCachePath}`, { stdio: 'inherit' });
  execSync(`chmod -R 777 ${renderCachePath}`, { stdio: 'inherit' });
  console.log('‚úì Cache directory created/confirmed with proper permissions');
} catch (error) {
  console.error('‚ùå Error setting up cache directory:', error);
}

// Function to save the Chrome path to files (not environment)
function saveChromePath(chromePath) {
  try {
    // Create a file that will be read at application startup
    const chromeCachePath = path.resolve('./chrome-path.txt');
    fs.writeFileSync(chromeCachePath, chromePath);
    console.log(`‚úì Chrome path saved to ${chromeCachePath}`);
    
    // Create a small module that can be imported to get the path
    const moduleContent = `// Auto-generated by fix-chrome.js
export const CHROME_PATH = '${chromePath.replace(/\\/g, '\\\\')}';
`;
    fs.writeFileSync('./chrome-path.js', moduleContent);
    
    console.log(`\n=== CHROME PATH SAVED ===`);
    console.log(`Chrome executable: ${chromePath}`);
    console.log(`This path will be used automatically by Aternos.ts!`);
    console.log(`NOTE: No environment variables were modified.`);
    console.log(`========================\n`);
  } catch (error) {
    console.error('Failed to save Chrome path to files:', error);
  }
}

// Install Chrome directly
console.log('üì• Installing Chrome directly...');

// Create Chrome directory
const chromeDir = `${renderCachePath}/chrome`;
execSync(`mkdir -p ${chromeDir}`, { stdio: 'inherit' });

let successfulInstall = false;
let chromePath = '';

try {
  // Download and extract Chrome browser directly
  console.log('Downloading Chrome...');
  execSync('apt-get update && apt-get install -y wget dpkg', { stdio: 'inherit' });
  execSync('wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O /tmp/chrome.deb', { stdio: 'inherit' });
  
  console.log('Extracting Chrome...');
  execSync('dpkg -x /tmp/chrome.deb /tmp/chrome', { stdio: 'inherit' });
  execSync('cp -r /tmp/chrome/opt/google/chrome/* ' + chromeDir, { stdio: 'inherit' });
  
  // Set executable
  execSync(`chmod +x ${chromeDir}/chrome`, { stdio: 'inherit' });
  
  chromePath = `${chromeDir}/chrome`;
  saveChromePath(chromePath);
  successfulInstall = true;
  
  console.log(`‚úÖ Chrome installed at: ${chromePath}`);
} catch (error) {
  console.error('‚ùå Error installing Chrome:', error);
  
  // Fallback to Puppeteer's built-in installer
  try {
    console.log('Falling back to puppeteer browsers install...');
    execSync('npx puppeteer browsers install chrome-headless-shell', { stdio: 'inherit' });
    
    // Find the installed browser
    console.log('Finding installed Chrome...');
    const findCmd = `find ${renderCachePath} -name "chrome-headless-shell" -type f | head -1`;
    const foundPath = execSync(findCmd, { encoding: 'utf8' }).trim();
    
    if (foundPath) {
      chromePath = foundPath;
      saveChromePath(chromePath);
      successfulInstall = true;
      
      console.log(`‚úÖ Found Chrome at: ${chromePath}`);
    } else {
      console.log('‚ùå Could not find Chrome executable after installation');
    }
  } catch (fallbackError) {
    console.error('‚ùå Fallback installation also failed:', fallbackError);
  }
}

// If we still don't have Chrome, search for it
if (!successfulInstall) {
  console.log('\nSearching for existing Chrome installations...');
  try {
    const findCmd = 'find /opt/render -name "chrome" -o -name "chrome-headless-shell" -type f | grep -v "node_modules" | head -5';
    const foundPaths = execSync(findCmd, { encoding: 'utf8' }).trim().split('\n').filter(Boolean);
    
    if (foundPaths.length > 0) {
      chromePath = foundPaths[0];
      saveChromePath(chromePath);
      successfulInstall = true;
      
      console.log(`‚úÖ Found existing Chrome at: ${chromePath}`);
    } else {
      console.log('No Chrome executables found');
    }
  } catch (e) {
    console.log('Error searching for Chrome:', e);
  }
}

// Check installed browsers
console.log('\nInstalled browsers:');
try {
  const browsers = execSync('npx puppeteer browsers list', { encoding: 'utf8' });
  console.log(browsers);
} catch (e) {
  console.log('Could not list browsers:', e);
}

// Final message
if (successfulInstall) {
  console.log('\n‚úÖ Chrome fix script successful! Chrome path is saved to chrome-path.txt and will be used automatically.');
  console.log(`NOTE: If the application still fails, you may need to manually set the PUPPETEER_EXECUTABLE_PATH environment variable to: ${chromePath}`);
} else {
  console.log('\n‚ùå Chrome fix script could not install or find Chrome. The application may not work.');
  console.log('Please check the build logs for errors and consider upgrading from the free plan.');
} 